This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-05-30T18:56:20.117Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  api/
    cast-score/
      route.ts
    frame/
      route.ts
  components/
    auth/
      farcaster-auth.tsx
    trivia/
      question-card.tsx
      results-card.tsx
      trivia-app.tsx
      welcome-screen.tsx
    ui/
      button.tsx
      card.tsx
      progress.tsx
  lib/
    farcaster.ts
    store.ts
    trivia-data.ts
    utils.ts
  globals.css
  layout.tsx
  page.tsx
public/
  .well-known/
    farcaster.json
  crypto-icon.svg
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
.gitignore
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/api/cast-score/route.ts
================
import { NextRequest, NextResponse } from "next/server";

interface CastScoreRequest {
  score: number;
  totalQuestions: number;
  entryYear: number | null;
  fid: string;
  username: string | null;
}

export async function POST(req: NextRequest): Promise<NextResponse> {
  try {
    // Parse the request body
    const body = (await req.json()) as CastScoreRequest;
    const { score, totalQuestions, entryYear, fid, username } = body;

    // Validate required fields
    if (!fid || score === undefined || totalQuestions === undefined) {
      return NextResponse.json(
        { error: "Missing required fields" },
        { status: 400 }
      );
    }

    // Construct the cast message
    const percentage = Math.round((score / totalQuestions) * 100);
    const message = `I scored ${score}/${totalQuestions} (${percentage}%) on the Crypto Trivia Quiz! ${
      entryYear ? `According to my knowledge, I should have entered crypto in ${entryYear}.` : ""
    } Play now!`;

    // In a real implementation, you would use the Farcaster API to cast the message
    // For now, we'll just simulate a successful cast
    console.log(`Cast message for user ${fid} (${username}): ${message}`);

    // Return success response
    return NextResponse.json({
      success: true,
      message: "Score cast successfully",
      castText: message,
    });
  } catch (error) {
    console.error("Error casting score:", error);
    return NextResponse.json(
      { error: "Internal Server Error" },
      { status: 500 }
    );
  }
}

================
File: app/api/frame/route.ts
================
import { NextRequest, NextResponse } from "next/server";

// Define the structure of a Farcaster Frame message
interface FrameMessage {
  untrustedData: {
    buttonIndex?: number;
    inputText?: string;
    // fid is used for identification but we're not using it in this demo
    // keeping it in the type for documentation purposes
    fid?: number;
    url?: string;
  };
  trustedData?: {
    messageBytes?: string;
  };
}

export async function POST(req: NextRequest): Promise<NextResponse> {
  try {
    // Parse the incoming request
    const body = (await req.json()) as FrameMessage;
    const { buttonIndex, inputText } = body.untrustedData;
    // We're not using fid in this implementation, but it would be used
    // to identify the user in a real-world implementation

    // Default frame response
    const baseUrl =
      process.env.NEXT_PUBLIC_BASE_URL ||
      "https://mini-app-theta-roan.vercel.app";

    // Handle different button actions
    if (buttonIndex === 1) {
      // Start quiz button was clicked
      return NextResponse.json({
        frames: {
          version: "vNext",
          image: `${baseUrl}/og-image.png`,
          buttons: [
            {
              label: "Take the Quiz",
              action: "post",
            },
          ],
          postUrl: `${baseUrl}/api/frame`,
        },
      });
    } else if (inputText) {
      // Handle shared result from the quiz
      return NextResponse.json({
        frames: {
          version: "vNext",
          image: `${baseUrl}/og-image.png`,
          buttons: [
            {
              label: "Take the Quiz",
              action: "post",
            },
          ],
          postUrl: `${baseUrl}/api/frame`,
        },
      });
    }

    // Default response
    return NextResponse.json({
      frames: {
        version: "vNext",
        image: `${baseUrl}/og-image.png`,
        buttons: [
          {
            label: "Start Quiz",
            action: "post",
          },
        ],
        postUrl: `${baseUrl}/api/frame`,
      },
    });
  } catch (error) {
    console.error("Error processing frame request:", error);
    return NextResponse.json(
      { error: "Internal Server Error" },
      { status: 500 }
    );
  }
}

================
File: app/components/auth/farcaster-auth.tsx
================
"use client";

import { useState } from "react";
import Image from "next/image";
import { motion } from "framer-motion";
import { useTriviaStore } from "@/app/lib/store";
import { Button } from "@/app/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/app/components/ui/card";
import { AlertCircle, LogIn } from "lucide-react";

export const FarcasterAuth = () => {
  const { setUserData, user, isAuthenticated } = useTriviaStore();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Check if the Farcaster API is available
  const isFarcasterAvailable = typeof window !== "undefined" && "farcaster" in window;

  // Handle Farcaster sign-in
  const handleSignIn = async () => {
    if (!isFarcasterAvailable) {
      setError("Farcaster API not available. Please use a Farcaster compatible browser or app.");
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      // @ts-expect-error - Farcaster API is not typed
      const response = await window.farcaster.signIn();
      
      if (response && response.success) {
        // Extract user data from the response
        const { fid, username, displayName, pfp } = response.user;
        
        // Update the store with user data
        setUserData({
          fid: fid.toString(),
          username,
          displayName,
          pfp,
          dailyPlays: user.dailyPlays // Keep existing play records
        });
      } else {
        setError("Failed to sign in with Farcaster. Please try again.");
      }
    } catch (err) {
      console.error("Farcaster sign-in error:", err);
      setError("An error occurred during sign-in. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  // If already authenticated, show a different UI
  if (isAuthenticated) {
    return (
      <Card className="w-full max-w-md mx-auto bg-accent/50 border-primary/20">
        <CardHeader className="pb-2">
          <CardTitle className="text-lg flex items-center gap-2">
            <div className="w-6 h-6 rounded-full overflow-hidden">
              {user.pfp && (
                <Image
                  src={user.pfp}
                  alt={user.displayName || user.username || "User"}
                  width={24}
                  height={24}
                  className="w-full h-full object-cover"
                />
              )}
            </div>
            <span>
              {user.displayName || user.username || "Authenticated User"}
            </span>
          </CardTitle>
        </CardHeader>
      </Card>
    );
  }

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle className="text-xl text-center">Sign in with Farcaster</CardTitle>
      </CardHeader>
      <CardContent>
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
          className="space-y-4"
        >
          {error && (
            <div className="p-3 bg-destructive/10 text-destructive rounded-md flex items-start gap-2">
              <AlertCircle className="h-5 w-5 mt-0.5 flex-shrink-0" />
              <p className="text-sm">{error}</p>
            </div>
          )}

          <p className="text-center text-muted-foreground">
            Sign in with your Farcaster account to track your progress and share your results.
          </p>

          <Button
            onClick={handleSignIn}
            disabled={isLoading || !isFarcasterAvailable}
            className="w-full"
            size="lg"
          >
            {isLoading ? (
              <span className="flex items-center gap-2">
                <span className="animate-spin h-4 w-4 border-2 border-current border-t-transparent rounded-full" />
                Signing in...
              </span>
            ) : (
              <span className="flex items-center gap-2">
                <LogIn className="h-5 w-5" />
                Sign in with Farcaster
              </span>
            )}
          </Button>

          {!isFarcasterAvailable && (
            <p className="text-center text-sm text-muted-foreground">
              Farcaster API not detected. Please use a Farcaster compatible browser or app.
            </p>
          )}
        </motion.div>
      </CardContent>
    </Card>
  );
};

================
File: app/components/trivia/question-card.tsx
================
"use client";

import { useState, useEffect, useRef } from "react";
import { motion } from "framer-motion";
import { useTriviaStore } from "@/app/lib/store";
import { Button } from "@/app/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/app/components/ui/card";
import { Progress } from "@/app/components/ui/progress";
import { Check, X, Clock } from "lucide-react";
import { cn } from "@/app/lib/utils";

export const QuestionCard = () => {
  const {
    questions,
    currentQuestionIndex,
    // We're not directly using answers in this component
    answerQuestion,
    nextQuestion,
  } = useTriviaStore();

  const [selectedOption, setSelectedOption] = useState<number | null>(null);
  const [isAnswered, setIsAnswered] = useState(false);
  const [showFeedback, setShowFeedback] = useState(false);
  const [timeLeft, setTimeLeft] = useState(5); // 5 seconds per question
  const [isTimerActive, setIsTimerActive] = useState(true);
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  // Get current question
  const currentQuestion = questions[currentQuestionIndex];

  // Calculate progress percentage
  const progressPercentage = (currentQuestionIndex / questions.length) * 100;

  // Reset state when question changes
  useEffect(() => {
    setSelectedOption(null);
    setIsAnswered(false);
    setShowFeedback(false);
    setTimeLeft(5); // Reset timer to 5 seconds
    setIsTimerActive(true);
  }, [currentQuestionIndex]);

  // Timer effect
  useEffect(() => {
    if (isTimerActive && timeLeft > 0) {
      timerRef.current = setTimeout(() => {
        setTimeLeft((prev) => prev - 1);
      }, 1000);
    } else if (timeLeft === 0 && isTimerActive) {
      // Time's up, auto-select the correct answer
      setIsTimerActive(false);
      if (!isAnswered) {
        // Auto-select the correct answer when time runs out
        const correctAnswer = currentQuestion.correctAnswer;
        setSelectedOption(correctAnswer);
        setIsAnswered(true);
        answerQuestion(correctAnswer);
        setShowFeedback(true);
      }
    }

    return () => {
      if (timerRef.current) {
        clearTimeout(timerRef.current);
      }
    };
  }, [timeLeft, isTimerActive, isAnswered, answerQuestion, currentQuestion]);

  // Handle option selection
  const handleOptionSelect = (optionIndex: number) => {
    if (isAnswered) return;

    // Stop the timer when an option is selected
    setIsTimerActive(false);

    setSelectedOption(optionIndex);
    setIsAnswered(true);
    answerQuestion(optionIndex);
    setShowFeedback(true);

    // Add a slight delay before showing the Next button for better UX
    setTimeout(() => {
      const nextButton = document.getElementById("next-question-button");
      if (nextButton) {
        nextButton.focus();
      }
    }, 500);
  };

  // Handle next question
  const handleNextQuestion = () => {
    nextQuestion();
  };

  // Auto-advance timer reference
  const autoAdvanceTimerRef = useRef<NodeJS.Timeout | null>(null);

  // Set up auto-advance timer when feedback is shown
  useEffect(() => {
    if (showFeedback) {
      // Clear any existing timer
      if (autoAdvanceTimerRef.current) {
        clearTimeout(autoAdvanceTimerRef.current);
      }
      
      // Set new timer for auto-advance after 3 seconds
      autoAdvanceTimerRef.current = setTimeout(() => {
        handleNextQuestion();
      }, 3000);
    }
    
    return () => {
      // Clean up timer on unmount or when feedback changes
      if (autoAdvanceTimerRef.current) {
        clearTimeout(autoAdvanceTimerRef.current);
      }
    };
  }, [showFeedback]);

  // If no questions are loaded yet
  if (!currentQuestion) {
    return null;
  }

  // This variable is used to determine button styling in the UI
  // We'll use it directly in the JSX instead of storing it in a variable

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm font-medium">
            Question {currentQuestionIndex + 1} of {questions.length}
          </span>
          <span className="text-sm font-medium capitalize">
            {currentQuestion.category.replace("-", "/")}
          </span>
        </div>
        <div className="flex justify-between items-center mb-2">
          <Progress value={progressPercentage} className="flex-1 mr-2" />
          <div
            className={cn(
              "flex items-center gap-1 px-2 py-1 rounded-md text-sm font-medium",
              timeLeft <= 5 ? "text-destructive" : "text-primary"
            )}
          >
            <Clock className="h-4 w-4" />
            <span>{timeLeft}s</span>
          </div>
        </div>
        <Progress
          value={(timeLeft / 5) * 100}
          className="mb-4"
          indicatorClassName={cn(
            timeLeft < 1
              ? "bg-destructive"
              : timeLeft <= 5
              ? "bg-amber-500"
              : "bg-primary"
          )}
        />
        <CardTitle className="text-xl break-words whitespace-normal">{currentQuestion.question}</CardTitle>
      </CardHeader>

      <CardContent className="space-y-3">
        {currentQuestion.options.map((option, index) => {
          const isCorrect = index === currentQuestion.correctAnswer;
          const isSelected = selectedOption === index;
          const isIncorrect = isSelected && !isCorrect && showFeedback;

          return (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.1 }}
            >
              <Button
                variant={isSelected ? "default" : "outline"}
                className={cn(
                  "w-full justify-between text-left h-auto py-4 px-5 mb-2 transition-all duration-200 relative",
                  isSelected && "ring-2 ring-primary",
                  showFeedback &&
                    isCorrect &&
                    "bg-[var(--success)] text-[var(--success-foreground)] hover:bg-[var(--success)]/90",
                  isIncorrect &&
                    "bg-destructive text-destructive-foreground hover:bg-destructive/90"
                )}
                onClick={() => handleOptionSelect(index)}
                disabled={isAnswered}
              >
                <span className="mr-2 break-words whitespace-normal w-full block">{option}</span>
                {showFeedback && (
                  <span className="flex items-center justify-center">
                    {isCorrect ? (
                      <Check className="h-5 w-5" />
                    ) : (
                      isIncorrect && <X className="h-5 w-5" />
                    )}
                  </span>
                )}
              </Button>
            </motion.div>
          );
        })}
      </CardContent>

      <CardFooter className="flex justify-center">
        {showFeedback && (
          <motion.div
            className="w-full"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.3 }}
          >
            <Button
              id="next-question-button"
              onClick={handleNextQuestion}
              className="w-full mt-4 py-5 text-base font-medium shadow-md hover:shadow-lg transition-all relative overflow-hidden group"
              size="lg"
              variant="default"
            >
              <div className="flex items-center justify-center space-x-2">
                <span>
                  {currentQuestionIndex === questions.length - 1
                    ? "See Results"
                    : "Next Question"}
                </span>
                <motion.div 
                  className="h-1 w-full absolute bottom-0 left-0 bg-primary/30"
                  initial={{ width: '100%' }}
                  animate={{ width: '0%' }}
                  transition={{ duration: 3, ease: 'linear' }}
                />
              </div>
            </Button>
          </motion.div>
        )}
      </CardFooter>
    </Card>
  );
};

================
File: app/components/trivia/results-card.tsx
================
"use client"

import { useState } from "react"
import { motion } from "framer-motion"
import { useTriviaStore } from "@/app/lib/store"
import { createFrameMessage } from "@/app/lib/farcaster"
import { Button } from "@/app/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/app/components/ui/card"
import { FarcasterAuth } from "@/app/components/auth/farcaster-auth"
import { AlertCircle, Share2, RefreshCw, Check } from "lucide-react"

export const ResultsCard = () => {
  const { 
    questions, 
    score, 
    entryYear, 
    resetQuiz, 
    isAuthenticated,
    castScore,
    hasReachedDailyLimit
  } = useTriviaStore()
  
  const [isCasting, setIsCasting] = useState(false)
  const [castSuccess, setCastSuccess] = useState(false)
  const [castError, setCastError] = useState<string | null>(null)
  
  // Calculate percentage score
  const percentage = Math.round((score / questions.length) * 100)
  
  // Get message based on score
  const getMessage = () => {
    if (percentage >= 80) return "Crypto OG! You've been around the block(chain)."
    if (percentage >= 60) return "Solid crypto knowledge. You've seen a few cycles."
    if (percentage >= 40) return "You know your way around crypto."
    return "Welcome to crypto! There's a lot to learn."
  }
  
  // Handle casting score to Farcaster
  const handleCastScore = async () => {
    if (!isAuthenticated) {
      setCastError("Please sign in with Farcaster to cast your score")
      return
    }
    
    setIsCasting(true)
    setCastError(null)
    
    try {
      const success = await castScore()
      
      if (success) {
        setCastSuccess(true)
      } else {
        setCastError("Failed to cast your score. Please try again.")
      }
    } catch (error) {
      console.error("Error casting score:", error)
      setCastError("An unexpected error occurred. Please try again.")
    } finally {
      setIsCasting(false)
    }
  }
  
  // Handle sharing result to Farcaster
  const handleShare = () => {
    const shareText = `I scored ${score}/${questions.length} on the Crypto Trivia Quiz! According to the quiz, I entered crypto around ${entryYear}. ${getMessage()} #CryptoTrivia`
    createFrameMessage(shareText)
    
    // Show a toast or feedback that the result was shared
    alert("Your result has been shared!")
  }
  
  // Use the hasReachedDailyLimit from store
  const hasReachedLimit = hasReachedDailyLimit
  
  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle className="text-center">Your Crypto Trivia Results</CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-6">
        <motion.div 
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.5 }}
          className="text-center"
        >
          <div className="text-6xl font-bold mb-2">
            {score}/{questions.length}
          </div>
          <div className="text-xl font-medium text-muted-foreground">
            {percentage}%
          </div>
        </motion.div>
        
        <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.3, duration: 0.5 }}
          className="text-center space-y-2"
        >
          <h3 className="text-xl font-semibold">Based on your score...</h3>
          <p>You probably entered crypto around:</p>
          <div className="text-3xl font-bold">{entryYear}</div>
          <p className="text-muted-foreground mt-2">{getMessage()}</p>
        </motion.div>
        
        {!isAuthenticated && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.6, duration: 0.5 }}
          >
            <FarcasterAuth />
          </motion.div>
        )}
      </CardContent>
      
      <CardFooter className="flex flex-col gap-3">
        {castError && (
          <div className="p-3 bg-destructive/10 text-destructive rounded-md flex items-start gap-2 mb-2">
            <AlertCircle className="h-5 w-5 mt-0.5 flex-shrink-0" />
            <p className="text-sm">{castError}</p>
          </div>
        )}
        
        {isAuthenticated && (
          <Button 
            onClick={handleCastScore}
            className="w-full"
            disabled={isCasting || castSuccess}
          >
            {isCasting ? (
              <span className="flex items-center gap-2">
                <span className="animate-spin h-4 w-4 border-2 border-current border-t-transparent rounded-full" />
                Casting...
              </span>
            ) : castSuccess ? (
              <span className="flex items-center gap-2">
                <Check className="h-5 w-5" />
                Cast Successful
              </span>
            ) : (
              <span className="flex items-center gap-2">
                <Share2 className="h-5 w-5" />
                Cast to Farcaster
              </span>
            )}
          </Button>
        )}
        
        <Button 
          onClick={handleShare}
          className="w-full"
          variant={isAuthenticated ? "outline" : "default"}
        >
          <Share2 className="h-5 w-5 mr-2" />
          Share as Frame
        </Button>
        
        <Button 
          onClick={resetQuiz}
          variant="outline" 
          className="w-full"
          disabled={hasReachedLimit}
        >
          <RefreshCw className="h-5 w-5 mr-2" />
          Try Again
        </Button>
        
        {hasReachedLimit && (
          <div className="mt-2 p-3 bg-amber-500/10 text-amber-500 rounded-md text-sm text-center">
            You&apos;ve reached the daily limit of 3 quizzes. Come back tomorrow for more!
          </div>
        )}
      </CardFooter>
    </Card>
  )
}

================
File: app/components/trivia/trivia-app.tsx
================
"use client";

import { useEffect, useState } from "react";
// Import the SDK from frame-sdk
import { sdk } from "@farcaster/frame-sdk";
import { useTriviaStore } from "@/app/lib/store";
import { WelcomeScreen } from "./welcome-screen";
import { QuestionCard } from "./question-card";
import { ResultsCard } from "./results-card";

export const TriviaApp = () => {
  const { questions, isComplete, initializeQuiz } = useTriviaStore();
  // Add state to control whether to show welcome screen
  const [showWelcome, setShowWelcome] = useState(true);

  // Only initialize the SDK when app is ready
  useEffect(() => {
    // Only notify ready when we have questions (after welcome screen is dismissed)
    if (questions.length > 0 && !showWelcome) {
      const notifyReady = async () => {
        try {
          await sdk.actions.ready();
          console.log("Farcaster SDK ready signal sent");
        } catch (error) {
          console.error("Error sending ready signal to Farcaster:", error);
        }
      };

      notifyReady();
    }
  }, [questions.length, showWelcome]);

  // Call ready() once if questions are already populated on initial mount
  // and welcome screen should be skipped
  useEffect(() => {
    // If we have questions from a previous session, skip welcome screen
    if (questions.length > 0 && isComplete === false) {
      setShowWelcome(false);
      
      const notifyReady = async () => {
        try {
          await sdk.actions.ready();
          console.log("Farcaster SDK ready signal sent (initial mount)");
        } catch (error) {
          console.error("Error sending ready signal to Farcaster:", error);
        }
      };

      notifyReady();
    }
  }, []); // Run only once on mount

  // Show welcome screen if showWelcome is true
  if (showWelcome) {
    return <WelcomeScreen onStart={() => {
      setShowWelcome(false);
      // Initialize quiz when user clicks start
      if (questions.length === 0) {
        initializeQuiz(10);
      }
    }} />;
  }

  // Show results if quiz is complete
  if (isComplete) {
    return <ResultsCard />;
  }

  // Otherwise show the question card
  return <QuestionCard />;
};

================
File: app/components/trivia/welcome-screen.tsx
================
"use client";

import { motion } from "framer-motion";
import { useTriviaStore } from "@/app/lib/store";
import { Button } from "@/app/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/app/components/ui/card";
import { FarcasterAuth } from "@/app/components/auth/farcaster-auth";
import { AlertCircle, Play } from "lucide-react";

interface WelcomeScreenProps {
  onStart?: () => void;
}

export const WelcomeScreen = ({ onStart }: WelcomeScreenProps) => {
  const { initializeQuiz, isAuthenticated, user, checkDailyLimit } =
    useTriviaStore();

  // Check if user has reached daily limit
  const hasReachedLimit = checkDailyLimit();

  const handleStart = () => {
    initializeQuiz(8); // Start with 8 questions
    
    // Call the onStart callback if provided
    if (onStart) {
      onStart();
    }
  };

  const categories = [
    { name: "Development", icon: "💻" },
    { name: "Memes/NFTs/Tokens", icon: "🖼️" },
    { name: "Scams", icon: "🚨" },
    { name: "Incidents", icon: "🚨" },
    // { name: "People in Web3", icon: "👤" },
  ];

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <motion.div
          initial={{ y: -20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5 }}
        >
          <CardTitle className="text-2xl text-center">
            Crypto Trivia Quiz
          </CardTitle>
          <CardDescription className="text-center mt-2">
            Test your crypto knowledge and discover when you should have entered
            the space!
          </CardDescription>
        </motion.div>
      </CardHeader>

      <CardContent>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.3 }}
        >
          <p className="text-center mb-4">
            Answer questions from these categories:
          </p>

          <div className="grid grid-cols-2 gap-3">
            {categories.map((category, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.5 + index * 0.1 }}
                className="bg-accent/50 p-3 rounded-lg text-center"
              >
                <div className="text-2xl mb-1">{category.icon}</div>
                <div className="text-sm font-medium">{category.name}</div>
              </motion.div>
            ))}
          </div>

          <div className="flex items-center justify-center gap-1 mt-4 mb-2">
            <div className="h-2 w-2 rounded-full bg-primary"></div>
            <p className="text-center text-sm text-muted-foreground">
              10 questions • 5 seconds per question • 10 plays per day
            </p>
            <div className="h-2 w-2 rounded-full bg-primary"></div>
          </div>

          {!isAuthenticated && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.8 }}
              className="mt-6"
            >
              <FarcasterAuth />
            </motion.div>
          )}

          {isAuthenticated && user.dailyPlays.count > 0 && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.8 }}
              className="mt-4 text-center text-sm"
            >
              <p className="text-muted-foreground">
                You&apos;ve played{" "}
                <span className="font-medium text-foreground">
                  {user.dailyPlays.count}/3
                </span>{" "}
                quizzes today
              </p>
            </motion.div>
          )}

          {hasReachedLimit && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.8 }}
              className="mt-4 p-3 bg-amber-500/10 text-amber-500 rounded-md flex items-start gap-2"
            >
              <AlertCircle className="h-5 w-5 mt-0.5 flex-shrink-0" />
              <p className="text-sm">
                You&apos;ve reached the daily limit of 3 quizzes. Come back
                tomorrow for more!
              </p>
            </motion.div>
          )}
        </motion.div>
      </CardContent>

      <CardFooter>
        <Button
          onClick={handleStart}
          className="w-full"
          size="lg"
          disabled={hasReachedLimit}
        >
          <Play className="h-5 w-5 mr-2" />
          Start Quiz
        </Button>
      </CardFooter>
    </Card>
  );
};

================
File: app/components/ui/button.tsx
================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/app/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-foreground disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: app/components/ui/card.tsx
================
import * as React from "react"
import { cn } from "@/app/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border border-border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter }

================
File: app/components/ui/progress.tsx
================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/app/lib/utils"

interface ProgressProps extends React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> {
  indicatorClassName?: string
}

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  ProgressProps
>(({ className, value, indicatorClassName, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className={cn("h-full w-full flex-1 bg-primary transition-all", indicatorClassName)}
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: app/lib/farcaster.ts
================
// Helper function for frame message handling in Farcaster
export function createFrameMessage(text: string): void {
  try {
    // In a real implementation, this would use the Farcaster SDK
    // This is a simplified version for our demo
    if (typeof window !== 'undefined') {
      console.log('Creating frame message:', text)
      
      // Mock frame message function for demo purposes
      if (window.parent !== window) {
        console.log('Would send message to parent frame:', text)
      }
    }
  } catch (error) {
    console.error('Error creating frame message:', error)
  }
}

================
File: app/lib/store.ts
================
"use client";

import { create } from "zustand";
import { persist } from "zustand/middleware";
import {
  TriviaQuestion,
  getRandomQuestions,
  calculateCryptoEntryYear,
} from "./trivia-data";

// Define a type for tracking daily plays
interface PlayRecord {
  date: string;
  count: number;
}

// Define a type for user data
interface UserData {
  fid: string | null;
  username: string | null;
  displayName: string | null;
  pfp: string | null;
  dailyPlays: PlayRecord;
}

// Define the persisted state structure
interface PersistedState {
  user: UserData;
  isAuthenticated: boolean;
}

// Define the main state structure
interface TriviaState extends PersistedState {
  // Quiz state
  questions: TriviaQuestion[];
  currentQuestionIndex: number;
  answers: (number | null)[];
  score: number;
  isComplete: boolean;
  entryYear: number | null;
  hasReachedDailyLimit: boolean;

  // Actions
  initializeQuiz: (questionCount?: number) => void;
  answerQuestion: (answerIndex: number) => void;
  nextQuestion: () => void;
  resetQuiz: () => void;
  calculateResults: () => void;
  setUserData: (userData: Partial<UserData>) => void;
  logoutUser: () => void;
  castScore: () => Promise<boolean>;
  checkDailyLimit: () => boolean;
}

// Get today's date in YYYY-MM-DD format for tracking daily plays
const getTodayString = () => {
  const date = new Date();
  return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(
    2,
    "0"
  )}-${String(date.getDate()).padStart(2, "0")}`;
};

// Create the store with persistence
export const useTriviaStore = create<TriviaState>()(
  persist(
    (set, get) => ({
      // Initial state
      questions: [],
      currentQuestionIndex: 0,
      answers: [],
      score: 0,
      isComplete: false,
      entryYear: null,

      // User state
      user: {
        fid: null,
        username: null,
        displayName: null,
        pfp: null,
        dailyPlays: {
          date: getTodayString(),
          count: 0,
        },
      },
      isAuthenticated: false,
      hasReachedDailyLimit: false,

      // Actions
      initializeQuiz: (questionCount = 10) => {
        // Check if user has reached daily limit
        const hasReachedLimit = get().checkDailyLimit();

        if (hasReachedLimit) {
          set({ hasReachedDailyLimit: true });
          return;
        }

        // Update play count for today
        const { user } = get();
        const today = getTodayString();
        const dailyPlays =
          user.dailyPlays.date === today
            ? { date: today, count: user.dailyPlays.count + 1 }
            : { date: today, count: 1 };

        // Get random questions and initialize quiz
        const questions = getRandomQuestions(questionCount);
        set({
          questions,
          currentQuestionIndex: 0,
          answers: Array(questions.length).fill(null),
          score: 0,
          isComplete: false,
          entryYear: null,
          user: {
            ...user,
            dailyPlays,
          },
        });
      },

      checkDailyLimit: () => {
        const { user } = get();
        const today = getTodayString();

        // Reset count if it's a new day
        if (user.dailyPlays.date !== today) {
          return false;
        }

        // Check if user has reached the limit of 10 plays per day
        return user.dailyPlays.count >= 10;
      },

      setUserData: (userData: Partial<UserData>) => {
        const { user } = get();
        set({
          user: { ...user, ...userData },
          isAuthenticated: Boolean(userData.fid),
        });
      },

      logoutUser: () => {
        set({
          user: {
            fid: null,
            username: null,
            displayName: null,
            pfp: null,
            dailyPlays: {
              date: getTodayString(),
              count: 0,
            },
          },
          isAuthenticated: false,
        });
      },

      castScore: async () => {
        const { score, questions, entryYear, user } = get();

        if (!user.fid) {
          console.error("User not authenticated");
          return false;
        }

        try {
          // Prepare the data to be cast
          const castData = {
            score,
            totalQuestions: questions.length,
            entryYear,
            fid: user.fid,
            username: user.username,
          };

          // Call the API endpoint to cast the score
          const response = await fetch("/api/cast-score", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(castData),
          });

          if (!response.ok) {
            throw new Error("Failed to cast score");
          }

          return true;
        } catch (error) {
          console.error("Error casting score:", error);
          return false;
        }
      },

      // Other actions

      answerQuestion: (answerIndex: number) => {
        const { currentQuestionIndex, answers, questions } = get();

        // Create a new answers array with the current answer updated
        const newAnswers = [...answers];
        newAnswers[currentQuestionIndex] = answerIndex;

        // Check if answer is correct and update score
        const isCorrect =
          answerIndex === questions[currentQuestionIndex].correctAnswer;

        set({
          answers: newAnswers,
          score: isCorrect ? get().score + 1 : get().score,
        });
      },

      nextQuestion: () => {
        const { currentQuestionIndex, questions } = get();
        const nextIndex = currentQuestionIndex + 1;

        if (nextIndex >= questions.length) {
          // If we've reached the end, calculate results
          get().calculateResults();
        } else {
          // Otherwise, move to the next question
          set({ currentQuestionIndex: nextIndex });
        }
      },

      resetQuiz: () => {
        // Check if user has reached daily limit before resetting
        const hasReachedLimit = get().checkDailyLimit();

        if (hasReachedLimit) {
          set({ hasReachedDailyLimit: true });
          return;
        }

        get().initializeQuiz();
      },

      calculateResults: () => {
        const { score, questions } = get();
        const entryYear = calculateCryptoEntryYear(score, questions.length);

        set({
          isComplete: true,
          entryYear,
        });
      },
    }),
    {
      name: "trivia-storage",
      // Only persist user data and authentication state
      partialize: (state) =>
        ({
          user: state.user,
          isAuthenticated: state.isAuthenticated,
        } as PersistedState),
    }
  )
);

================
File: app/lib/trivia-data.ts
================
export type TriviaQuestion = {
  id: string;
  category:
    | "development"
    | "memes-nfts-tokens"
    | "scams-incidents"
    | "crypto-characters";
  question: string;
  options: string[];
  correctAnswer: number;
  yearIndicator: number; // Approximate year this knowledge became relevant
};

export const triviaQuestions: TriviaQuestion[] = [
  // Development Category
  {
    id: "dev-1",
    category: "development",
    question: "Which consensus mechanism does Ethereum use after 'The Merge'?",
    options: [
      "Proof of Work",
      "Proof of Stake",
      "Proof of Authority",
      "Proof of Space",
    ],
    correctAnswer: 1,
    yearIndicator: 2022,
  },
  {
    id: "dev-2",
    category: "development",
    question:
      "What programming language is primarily used for Ethereum smart contracts?",
    options: ["JavaScript", "Python", "Solidity", "Rust"],
    correctAnswer: 2,
    yearIndicator: 2017,
  },
  {
    id: "dev-3",
    category: "development",
    question: "What is ERC-721?",
    options: [
      "A fungible token standard",
      "A non-fungible token standard",
      "A governance standard",
      "A staking standard",
    ],
    correctAnswer: 1,
    yearIndicator: 2018,
  },
  {
    id: "dev-4",
    category: "development",
    question: "What is a Layer 2 solution?",
    options: [
      "A new blockchain",
      "A scaling solution built on top of an existing blockchain",
      "A consensus mechanism",
      "A type of wallet",
    ],
    correctAnswer: 1,
    yearIndicator: 2020,
  },
  {
    id: "dev-5",
    category: "development",
    question: "What is the primary purpose of Farcaster?",
    options: [
      "A decentralized exchange",
      "A decentralized social protocol",
      "A layer 2 solution",
      "A stablecoin protocol",
    ],
    correctAnswer: 1,
    yearIndicator: 2021,
  },

  // Memes/NFTs Category
  {
    id: "meme-1",
    category: "memes-nfts-tokens",
    question:
      "Which NFT collection features pixelated characters and became one of the first major NFT phenomena?",
    options: ["Bored Ape Yacht Club", "CryptoPunks", "Azuki", "Doodles"],
    correctAnswer: 1,
    yearIndicator: 2017,
  },
  {
    id: "meme-2",
    category: "memes-nfts-tokens",
    question: "What does 'WAGMI' stand for in crypto culture?",
    options: [
      "We Are Getting Money Instantly",
      "We're All Gonna Make It",
      "When Art Generates Massive Income",
      "Wealth And Growth Metrics Index",
    ],
    correctAnswer: 1,
    yearIndicator: 2021,
  },
  {
    id: "meme-3",
    category: "memes-nfts-tokens",
    question: "What is 'Diamond Hands' referring to?",
    options: [
      "A type of NFT",
      "Holding assets despite volatility",
      "A crypto wallet",
      "A mining technique",
    ],
    correctAnswer: 1,
    yearIndicator: 2020,
  },
  {
    id: "meme-4",
    category: "memes-nfts-tokens",
    question:
      "Which meme coin was initially created as a joke but gained significant value?",
    options: ["Bitcoin", "Ethereum", "Dogecoin", "USD Coin"],
    correctAnswer: 2,
    yearIndicator: 2013,
  },
  {
    id: "meme-5",
    category: "memes-nfts-tokens",
    question: "What does 'HODL' originally come from?",
    options: [
      "Hold On for Dear Life",
      "A misspelling of 'HOLD'",
      "High-Octane Decentralized Ledger",
      "Highly Optimized Digital Liquidity",
    ],
    correctAnswer: 1,
    yearIndicator: 2013,
  },

  // Scams Category
  {
    id: "scam-1",
    category: "scams-incidents",
    question: "What is a 'rug pull' in crypto?",
    options: [
      "A hardware wallet malfunction",
      "Developers abandoning a project after taking investors' money",
      "A type of mining attack",
      "A market manipulation technique",
    ],
    correctAnswer: 1,
    yearIndicator: 2020,
  },
  {
    id: "scam-2",
    category: "scams-incidents",
    question: "What was BitConnect primarily known for?",
    options: [
      "Being the first DEX",
      "A legitimate lending platform",
      "A Ponzi scheme",
      "A hardware wallet",
    ],
    correctAnswer: 2,
    yearIndicator: 2018,
  },
  {
    id: "scam-3",
    category: "scams-incidents",
    question: "What is 'phishing' in the context of crypto?",
    options: [
      "Mining for small amounts of crypto",
      "Attempting to steal private keys through deception",
      "A consensus mechanism",
      "A type of airdrop",
    ],
    correctAnswer: 1,
    yearIndicator: 2016,
  },
  {
    id: "scam-4",
    category: "scams-incidents",
    question: "What is a 'honeypot' in crypto?",
    options: [
      "A contract designed to trap funds",
      "A high-yield staking pool",
      "A type of hardware wallet",
      "A reward mechanism",
    ],
    correctAnswer: 0,
    yearIndicator: 2019,
  },
  {
    id: "scam-5",
    category: "scams-incidents",
    question:
      "What type of scam involves impersonating celebrities to promote fake giveaways?",
    options: [
      "Rug pull",
      "Pump and dump",
      "Social engineering",
      "Celebrity endorsement scam",
    ],
    correctAnswer: 3,
    yearIndicator: 2018,
  },

  // Incidents Category
  {
    id: "incident-1",
    category: "crypto-characters",
    question: "What was 'The DAO' hack?",
    options: [
      "A social media account breach",
      "An exchange hack",
      "An exploit of a smart contract vulnerability",
      "A 51% attack",
    ],
    correctAnswer: 2,
    yearIndicator: 2016,
  },
  {
    id: "incident-2",
    category: "crypto-characters",
    question:
      "Which exchange filed for bankruptcy in 2022 after misusing customer funds?",
    options: ["Binance", "Coinbase", "FTX", "Kraken"],
    correctAnswer: 2,
    yearIndicator: 2022,
  },
  {
    id: "incident-3",
    category: "crypto-characters",
    question:
      "What was the name of the Bitcoin exchange that was hacked in 2014, leading to its bankruptcy?",
    options: ["Mt. Gox", "Binance", "Coinbase", "Kraken"],
    correctAnswer: 0,
    yearIndicator: 2014,
  },
  {
    id: "incident-4",
    category: "crypto-characters",
    question: "What major event caused Bitcoin to crash in May 2021?",
    options: [
      "US regulation",
      "China's mining ban",
      "Elon Musk's tweets",
      "DeFi collapse",
    ],
    correctAnswer: 1,
    yearIndicator: 2021,
  },
  {
    id: "incident-5",
    category: "crypto-characters",
    question: "What was the Terra/Luna collapse of 2022?",
    options: [
      "A mining pool shutdown",
      "A stablecoin losing its peg and collapsing",
      "An exchange hack",
      "A 51% attack",
    ],
    correctAnswer: 1,
    yearIndicator: 2022,
  },
];

export const getRandomQuestions = (count: number = 8): TriviaQuestion[] => {
  // Ensure we get questions from each category
  const categories = [
    "development",
    "memes-nfts-tokens",
    "scams-incidents",
    "crypto-characters",
  ] as const;
  const questionsPerCategory = Math.floor(count / categories.length);
  const remainder = count % categories.length;

  let selectedQuestions: TriviaQuestion[] = [];

  categories.forEach((category, index) => {
    const categoryQuestions = triviaQuestions.filter(
      (q) => q.category === category
    );
    const categoryCount =
      index < remainder ? questionsPerCategory + 1 : questionsPerCategory;

    // Shuffle the category questions
    const shuffled = [...categoryQuestions].sort(() => 0.5 - Math.random());

    // Take the required number of questions
    selectedQuestions = [
      ...selectedQuestions,
      ...shuffled.slice(0, categoryCount),
    ];
  });

  // Shuffle the final selection to mix categories
  return selectedQuestions.sort(() => 0.5 - Math.random());
};

export const calculateCryptoEntryYear = (
  score: number,
  totalQuestions: number
): number => {
  // Calculate percentage score
  const percentageScore = (score / totalQuestions) * 100;

  // Map percentage to a year (2013-2023 range)
  // Higher score = earlier entry (more knowledgeable about early crypto)
  if (percentageScore >= 90) return 2013; // OG crypto knowledge
  if (percentageScore >= 80) return 2015;
  if (percentageScore >= 70) return 2017; // Bull run era
  if (percentageScore >= 60) return 2019;
  if (percentageScore >= 50) return 2020; // DeFi summer
  if (percentageScore >= 40) return 2021; // NFT boom
  if (percentageScore >= 30) return 2022; // Bear market
  return 2023; // Crypto newbie
};

================
File: app/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: app/globals.css
================
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
  --card: #ffffff;
  --card-foreground: #171717;
  --primary: #8c66fc; /* Farcaster purple */
  --primary-foreground: #ffffff;
  --secondary: #f1f5f9;
  --secondary-foreground: #1e293b;
  --muted: #f1f5f9;
  --muted-foreground: #64748b;
  --accent: #eee6ff; /* Light purple for accents */
  --accent-foreground: #1e293b;
  --destructive: #ef4444;
  --destructive-foreground: #ffffff;
  --border: #e2e8f0;
  --input: #e2e8f0;
  --ring: #8c66fc;
  --success: #10b981; /* Success color for correct answers */
  --success-foreground: #ffffff;
  --radius: 0.5rem;
  
  /* Theme variables */
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
    --card: #171717;
    --card-foreground: #ededed;
    --primary: #8c66fc; /* Farcaster purple */
    --primary-foreground: #ffffff;
    --secondary: #1e293b;
    --secondary-foreground: #f8fafc;
    --muted: #1e293b;
    --muted-foreground: #94a3b8;
    --accent: #2d2a3d; /* Dark purple for accents */
    --accent-foreground: #f8fafc;
    --destructive: #ef4444;
    --destructive-foreground: #ffffff;
    --success: #10b981; /* Success color for correct answers */
    --success-foreground: #ffffff;
    --border: #334155;
    --input: #334155;
    --ring: #8c66fc;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: var(--font-sans);
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Crypto Trivia | Farcaster Mini App",
  description:
    "Test your crypto knowledge and discover when you should have entered the space!",
  // Farcaster Frame metadata
  other: {
    "fc:frame": "vNext",
    "fc:frame:image": `${process.env.NEXT_PUBLIC_BASE_URL}/og-image.png`,
    "fc:frame:button:1": "Start Quiz",
    "fc:frame:post_url": `${process.env.NEXT_PUBLIC_BASE_URL}/api/frame`,
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1"
        />
        <meta name="og:title" content="Crypto Trivia" />
        <meta
          name="og:image"
          content={`${process.env.NEXT_PUBLIC_BASE_URL}/og-image.png`}
        />
        <meta
          name="og:description"
          content="Test your crypto knowledge and discover when you should have entered the space!"
        />
        <meta
          name="fc:frame"
          content={JSON.stringify({
            version: "next",
            imageUrl: `${process.env.NEXT_PUBLIC_BASE_URL}/og-image.png`,
            button: {
              title: "Start Quiz",
              action: {
                type: "launch_frame",
                name: "Crypto Trivia",
                url: `${process.env.NEXT_PUBLIC_BASE_URL}`,
                splashImageUrl: `${process.env.NEXT_PUBLIC_BASE_URL}/logo.png`,
                splashBackgroundColor: "#f5f0ec",
              },
            },
          })}
        />
        <meta name="og:type" content="website" />
        <meta name="og:url" content={`${process.env.NEXT_PUBLIC_BASE_URL}`} />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased bg-background text-foreground`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
import { Metadata } from "next";
import Image from "next/image";
import { TriviaApp } from "./components/trivia/trivia-app";

export const metadata: Metadata = {
  title: "Crypto Trivia | Farcaster Mini App",
  description:
    "Test your crypto knowledge and discover when you should have entered the space!",
};

export default function Home() {
  return (
    <div className="min-h-screen p-4 md:p-8 flex flex-col items-center justify-center">
      <header className="w-full max-w-md mx-auto flex items-center justify-between mb-6">
        <div className="flex items-center gap-2">
          <Image
            src="/crypto-icon.svg"
            alt="Crypto Trivia"
            width={32}
            height={32}
            className="rounded-full"
          />
          <h1 className="text-xl font-bold">Crypto Trivia</h1>
        </div>
        <div className="text-sm text-muted-foreground">Farcaster Mini App</div>
      </header>

      <main className="w-full">
        <TriviaApp />
      </main>

      <footer className="mt-8 text-center text-sm text-muted-foreground">
        <p>Created with ❤️ by @ayushgupta0610</p>
      </footer>
    </div>
  );
}

================
File: public/.well-known/farcaster.json
================
{
  "accountAssociation": {
    "header": "<BASE64-JFS-HEADER>",
    "payload": "<BASE64-JFS-PAYLOAD-{\"domain\":\"mini-app-theta-roan.vercel.app\"}>",
    "signature": "<BASE64-JFS-SIGNATURE>"
  },
  "frame": {
    "version": "1",
    "name": "Crypto Trivia",
    "iconUrl": "https://mini-app-theta-roan.vercel.app/logo.png",
    "homeUrl": "https://mini-app-theta-roan.vercel.app/",
    "imageUrl": "https://mini-app-theta-roan.vercel.app/og-image.png",
    "buttonTitle": "Start Quiz",
    "splashImageUrl": "https://mini-app-theta-roan.vercel.app/logo.png",
    "splashBackgroundColor": "#f5f0ec",
    "primaryCategory": "games",
    "description": "Test your crypto knowledge with this fun trivia quiz",
    "ogTitle": "Crypto Trivia",
    "ogDescription": "Test your crypto knowledge and discover when you should have entered the space!",
    "ogImageUrl": "https://mini-app-theta-roan.vercel.app/og-image.png",
    "requiredCapabilities": ["wallet.getEthereumProvider", "actions.signIn"]
  }
}

================
File: public/crypto-icon.svg
================
<svg width="64" height="64" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
  <rect width="64" height="64" rx="32" fill="#8A2BE2"/>
  <path d="M32 12C20.9543 12 12 20.9543 12 32C12 43.0457 20.9543 52 32 52C43.0457 52 52 43.0457 52 32C52 20.9543 43.0457 12 32 12ZM32 16C40.8366 16 48 23.1634 48 32C48 40.8366 40.8366 48 32 48C23.1634 48 16 40.8366 16 32C16 23.1634 23.1634 16 32 16Z" fill="white"/>
  <path d="M32 20L28 28H36L32 20Z" fill="white"/>
  <path d="M32 44L36 36H28L32 44Z" fill="white"/>
  <path d="M20 32L28 28V36L20 32Z" fill="white"/>
  <path d="M44 32L36 36V28L44 32Z" fill="white"/>
</svg>

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  reactStrictMode: true,
  env: {
    NEXT_PUBLIC_BASE_URL:
      process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000",
  },
  images: {
    domains: [`${process.env.NEXT_PUBLIC_BASE_URL}`, "localhost"],
    formats: ["image/webp"],
  },
  async headers() {
    return [
      {
        source: "/.well-known/farcaster.json",
        headers: [
          {
            key: "Access-Control-Allow-Origin",
            value: "*",
          },
          {
            key: "Cache-Control",
            value: "public, max-age=86400", // Cache for 24 hours
          },
          {
            key: "Content-Type",
            value: "application/json",
          },
        ],
      },
    ];
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "farcaster-mini-app-2",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@farcaster/auth-kit": "^0.8.0",
    "@farcaster/core": "^0.16.4",
    "@farcaster/frame-sdk": "^0.0.53",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.15.0",
    "lucide-react": "^0.511.0",
    "next": "15.3.2",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^3.3.0",
    "zod": "^3.25.32",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.2",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: README.md
================
# Crypto Trivia | Farcaster Mini App

A fun and interactive Farcaster mini app that tests users' crypto knowledge across four categories: Development, Memes/NFTs, Scams, and Incidents. Based on their score, users receive an estimated year when they should have entered the crypto space, which they can share on Farcaster.

## Features

- Interactive trivia quiz with questions from four crypto-related categories
- Animated UI with smooth transitions between questions
- Score calculation and crypto entry year estimation
- Farcaster Frame integration for sharing results
- Responsive design that works on all devices

## Tech Stack

- **Framework**: Next.js 15 with React 19
- **Styling**: Tailwind CSS 4
- **State Management**: Zustand
- **Animations**: Framer Motion
- **UI Components**: Custom components with Radix UI primitives
- **Farcaster Integration**: Frame API for sharing results

## Development

### Prerequisites

- Node.js 18+ and npm

### Getting Started

1. Clone the repository
2. Install dependencies:
   ```bash
   npm install
   ```
3. Run the development server:
   ```bash
   npm run dev
   ```
4. Open [http://localhost:3000](http://localhost:3000) in your browser

### Deployment

This app can be deployed to any platform that supports Next.js, such as Vercel or Netlify.

For Farcaster Frame integration, make sure to update the following environment variables:

```
NEXT_PUBLIC_BASE_URL=https://mini-app-theta-roan.vercel.app
```

Also update the Frame metadata in `app/layout.tsx` with your deployment URL.

## Project Structure

- `app/` - Next.js app directory
  - `components/` - UI and trivia components
    - `ui/` - Reusable UI components
    - `trivia/` - Trivia-specific components
  - `lib/` - Utility functions and data
    - `trivia-data.ts` - Questions and scoring logic
    - `store.ts` - Zustand state management
    - `farcaster.ts` - Farcaster integration helpers
  - `api/` - API routes for Farcaster Frame integration

## License

MIT

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
